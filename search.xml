<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title></title>
      <url>%2F2017%2F05%2F17%2FKVM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4md%2F</url>
      <content type="text"><![CDATA[title: KVM常用命令categories: - KVM KVM常用命令编辑、备份XML文件12virsh edit ostest1virsh dumpxml ostest1 &gt; /kvmdump/ 创建存储池```mkdir /data/volvirsh pool-define-as vmdisk –type dir –target /data/volvirsh pool-build vmdisk]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F05%2F17%2F%E9%AB%98%E6%80%A7%E8%83%BDMysql%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[title : 高性能Mysql笔记date : 2017-05-17categories : - Mysql笔记 123456show global status threads_runningthreads_connectedquestionsqueries``` mysqladmin ext -i1 | awk ‘/Queries/{q=$4-qp;qp=$4}/Threads_connected/{tc=$4}/Threads_running/{printf “%5d %5d %5d\n”,q,tc,$4}’12 mysqladmin -uroot -p -h127.0.0.1 -P3306 -r -i 1 ext |\awk -F”|” ‘{\ if($2 ~ /Variable_name/){\ print “ &lt;————- “ strftime(“%H:%M:%S”) “ ————-&gt;”;\ }\ if($2 ~ /Questions|Queries|Innodb_rows|Com_select |Com_insert |Com_update |Com_delete |Innodb_buffer_pool_read_requests/)\ print $2 $3;\}’12 mysqladmin -P3306 -uroot -p -h127.0.0.1 -r -i 1 ext |\awk -F”|” \“BEGIN{ count=0; }”\‘{ if($2 ~ /Variable_name/ &amp;&amp; ((++count)%20 == 1)){\ print “———-|———|— MySQL Command Status –|—– Innodb row operation —-|– Buffer Pool Read –”;\ print “—Time—|—QPS—|select insert update delete| read inserted updated deleted| logical physical”;\}\else if ($2 ~ /Queries/){queries=$3;}\else if ($2 ~ /Com_select /){com_select=$3;}\else if ($2 ~ /Com_insert /){com_insert=$3;}\else if ($2 ~ /Com_update /){com_update=$3;}\else if ($2 ~ /Com_delete /){com_delete=$3;}\else if ($2 ~ /Innodb_rows_read/){innodb_rows_read=$3;}\else if ($2 ~ /Innodb_rows_deleted/){innodb_rows_deleted=$3;}\else if ($2 ~ /Innodb_rows_inserted/){innodb_rows_inserted=$3;}\else if ($2 ~ /Innodb_rows_updated/){innodb_rows_updated=$3;}\else if ($2 ~ /Innodb_buffer_pool_read_requests/){innodb_lor=$3;}\else if ($2 ~ /Innodb_buffer_pool_reads/){innodb_phr=$3;}\else if ($2 ~ /Uptime / &amp;&amp; count &gt;= 2){\ printf(“ %s |%9d”,strftime(“%H:%M:%S”),queries);\ printf(“|%6d %6d %6d %6d”,com_select,com_insert,com_update,com_delete);\ printf(“|%6d %8d %7d %7d”,innodb_rows_read,innodb_rows_inserted,innodb_rows_updated,innodb_rows_deleted);\ printf(“|%10d %11d\n”,innodb_lor,innodb_phr);\}}’12 mysql -u root -p -e ‘show processlist \G’ | grep State | uniq -c | sort -rn```]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F05%2F17%2FSql%20server%E9%95%9C%E5%83%8F%2F</url>
      <content type="text"><![CDATA[镜像数据库 主体库 镜像库 见证服务器 运行模式可故障转移的同步模式不可故障转移的同步模式异步模式第一种模式需要见证服务器 三种模式的主体服务器均需要运行在完整恢复模式下 Sql server三种恢复模式 简单恢复模式 checkpoint with truncate log提交完事务截断日志，无法recover in point只能恢复到上一次备份 完整恢复模式 checkpoint without truncate log提交完日志不截断日志，只有在备份过LOG后才可以截断，可以进行recover in point 大容量日志恢复模式对于大量数据操作不记录日志，比如bcp、select into、create|rebuild index等 设置数据库恢复级别1234use master go alter database hxtest set recovery full with no_wait; go 一个数据库只能有一个镜像库，如果想创建多个镜像可以采用传送日志加镜像的方法 切换角色 use mastergoalter database hxtest set partner failover; ssms alter database hxtest set force_service_allow_data_loss ;可能丢失数据 非域环境检查 Windows 账号。 网络是否能联通，并且端口可用。 主体服务器和镜像服务器的磁盘配置是否正确。 SQL Server版本、补丁是否满足镜像要求。 SQL Server数据库的恢复模式、兼容级别。 SQL Server上是否有常规的备份作业，特别是日志备份。 主体服务器和镜像服务器的SQL Server能否互通。 主体服务器和镜像服务器中是否有共享文件夹。 查看文件位置use mastergoselect physical_name fromsys.master_fileswhere database_id = db_id(‘hxtest’) 创建主秘钥use mastergocreate master key encrytion by password = ‘circ1815’; 删除主秘钥use masterdrop master key ; 创建证书use mastergocreate certificate circ_certwith subject = ‘circ_cert’,expiry_date = ‘2020-01-01’; 删除证书use masterdrop certification circ_cert; 使用circ_cert证书创建端点12345678IF NOT EXISTS ( SELECT 1 FROM sys.database_mirroring_endpoints ) BEGIN CREATE ENDPOINT [DatabaseMirroring] STATE = STARTED AS TCP ( LISTENER_PORT = 5022, LISTENER_IP = ALL ) FOR DATABASE_MIRRORING ( AUTHENTICATION = CERTIFICATE circ_certa, ENCRYPTION = REQUIRED Algorithm AES, ROLE = ALL ); END 备份证书backup certification circ_certto file ‘d:\data\circ_cert.cert’; 创建Logincreate login replb with password =’Circ1815’; 创建usercreate user replb for loging replb; 使用证书授权用户create certificate circ_certbauthorization replbfrom file = ‘c:\data\circ_certb.cert’; 登录账号授权访问端口grant connect on endpoint::[DatabaseMirroring] to [replb] 设置伙伴服务器alter database hxtest setpartner = ‘TCP://win1:5022’ ; 暂停镜像alter database hxtest set partner suspend ;alter database hxtest set partner resume ; 镜像监控 监控数据存放在dbm_monitor_data表中 通过执行sp_dbmmonitorupdate存储过程定期监控 镜像监控器 exec sp_dbmmonitoresult;]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F05%2F17%2FMysql%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[Mysql日志格式SBRRBRMixedStatement模式转Row模式条件： 语句包含UUID() 包含auto_increment列的表更新、触发器、存储函数被调用]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F05%2F17%2FSql%20server%202008%E7%AE%A1%E7%90%86%E5%91%98%E5%BF%85%E5%A4%87%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[Sql server 2008笔记截断日志123alter database hxtest set recovery simple ;dbcc shrinkfile (hxtest_log,1); alter database hxtest set recovery full ; Sql server 支持的网络协议 Shared Memory Named pipes TCP/IP VIA协议使用网卡的物理地址和端口号配置Sql server服务多用于局域网 局域网使用命名管道net use \\10.201.241.155\ipc$]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F05%2F17%2FInnodb%20buffer%20pool%20configuration%2F</url>
      <content type="text"><![CDATA[innodb_buffer_pool_size innodb_buffer_pool_chunk_size innodb_buffer_pool_instances innodb_old_blocks_pct innodb_old_blocks_time]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F05%2F17%2FCeph%20deploy%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm [ceph-noarch]name=Ceph noarch packagesbaseurl=https://download.ceph.com/rpm-jewel/el7/noarchenabled=1gpgcheck=1type=rpm-mdgpgkey=https://download.ceph.com/keys/release.asc yum update &amp;&amp; yum install ceph-deploy -yyum install ntp echo “ceph ALL = (root) NOPASSWD:ALL” | tee /etc/sudoers.d/cephchmod 440 /etc/sudoers.d/ceph visudo Defaults:ceph !requiretty mkdir mycephcd myceph ceph-deploy purgedata (nodexxx,nodexxx)ceph-deploy forgetkeys ceph-deploy purge (nodexxx,nodexxx) osd pool default size = 2 yum install snappy leveldb gdisk python-argparse gperftools-libsyum install python-itsdangerous python-rbd python-rados redhat-lsb-core python-jinja2 hdparm]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ceph笔记]]></title>
      <url>%2F2017%2F05%2F17%2FCeph%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[组件OSD – Object Storage Device 负责数据存储、复制、平衡数据分布等功能 提交一些信息给Monitor,比如OSD心跳等 一个集群中至少需要两个OSD保障active+clean健康状态和双副本（默认）数据 Monitor 维护整个集群的健康状态 包含Monitor Map、OSD Map、PG（placemant group) Map和Crush map MDS – Metadata Server 主要保存Ceph文件系统的元数据 块存储、对象存储都不需要MDS 至少一个Monitor和至少两个OSD,运行Ceph文件系统的客户端需要使用MDS Ceph功能 RADOSGW(Reliable、Autonomic、Distributed、Object Storage Gateway)功能基于Libradosgw，提供RESTful协议的网关，兼容S3和Swift接口，可以对接网盘及HLS流媒体应用等 raw 提供裸设备 基于librados，通过Librbd创建一个裸设备,通过qemu或者kvm附加到VM上 文件系统 安装可以通过两种方式安装：1、ceph-deploy工具自动安装 2、手动安装各种组件]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python自动化运维]]></title>
      <url>%2F2017%2F05%2F17%2FPython%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A8%A1%E5%9D%97%2F</url>
      <content type="text"><![CDATA[psutil模块1234wget https://pypi.python.org/packages/source/p/psutil/psutil-2.0.0.tar.gztar -xzvf psutil-2.0.0.tar.gzcd psutil-2.0.0python setup.py install 123import psutilmem=psutil.virtual_memory()mem.total,mem.used import psutilpsutil.cpu_times(percpu=True)psutil.disk_usage(‘/‘)psutil.disk_partitions()psutil.net_io_counters()psutil.pids()psutil.users() import psutil,datetimedatetime.datetime.fromtimestamp(psutil.boot_time()).strftime(“%Y-%m-%d %H:%M:%S”) psutil.pids()psutil.Process()p=psutil.Process(222)p.name()p.exe()p.cwd()p.status()p.create_time()p.uids()p.gids()p.cpu_times()p.cpu_affinity()p.memory_percert()p.memory_info()p.io_counters()p.connections()]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ansible安装]]></title>
      <url>%2F2017%2F05%2F17%2FAnsible%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[控制主机所需组件： Python 2.6及以上版本 paramiko模块(Python连接模块 需安装PyCrypto模块(加密) 支持SSHv2) PyYAML Jinja2 httplib2(http客户端程序库) 被管节点所需组件： Python 2.4及以上版本(低于2.5需安装python-simplejson) Windows上需安装Powershell 3.0并授权远程管理 GitHub源码安装1.Github源码安装yum install gcc libffi-devel python-devel openssl-devel1234git clone git://github.com/ansible/ansible.git --recursive cd ./ansiblesource ./hacking/env-setup(-q 静默模式) 需提前安装pipeasy_install pip 安装控制主机需要的模块pip install paramiko PyYAML Jinja2 httplib2 six cryptography 运行env-setup脚本，ANSIBLE_HOSTS变量可以更改默认资源清单位置 默认位置为/etc/ansible/hosts 更新Ansible git pull –rebase git submodule update –init –recursive更新git中指向自身的模块 Ansible配置文件查找顺序 ANSIBLE_CONFIG ./ansible.cfg ~/.ansible.cfg /etc/ansible/ansible.cfg(Github安装需要copy example目录下的ansible.cfg到相应目录) PYTHONPATH=/opt/ansible/libMANPATH=/opt/ansible/docs/manexport PYTHONPATH MANPATH 初试ansible 10.201.241.144 -m ping如果不用密钥验证 需要添加-k 选项需提前安装 sshpass123ansible ostest -m shell -a '/bin/echo Hello,World!' -i /root/inventory.cfg-m module -a args 列出ansible支持的系统模块ansible-doc -l 显示模块功能如shell 模块ansible-doc shellansible-doc -s 简短描述 显示执行情况详细信息1ansible -v -vvv 列出inventory清单1ansible ostest --list 查看facts12ansible ostest -m setup ansible ostest -m setup -a 'filter=ansible_all_ipv4_addresses' 查看支持facter12ansible ostest -m shell -a 'rpm -qa ruby-json facter' ansible ostest -m facter]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo搭建及配置]]></title>
      <url>%2F2017%2F04%2F16%2FHexo%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[安装Node.js Git Hexo12npm install hexo -g hexo init Hexo常用命令123456789101112131415161718192021hexo init --初始化站点hexo new --发布新文章 如果标题有空格，需要用引号标注hexo generate --产生静态页面 -d --deploy 产生页面的同时发布网页 -w --watch 查看文件变化hexo publish --发布一个模板 drafthexo server --启动hexo本地服务 -p --port 指定端口 -s --static 只发布静态文件 -l --log 开启loggerhexo deploy --发布站点 -g 先产生静态文件hexo render --渲染文件 hexo migrate --迁移到其他blog系统hexo list --列出指定内容 post pagehexo --safe --禁用插件hexo --slient --禁止输出信息hexo --config custom.yml --指定配置文件hexo --cwd --指定工作目录 更改主题及相关配置主配置文件 _config.yml theme: next 更改css设置themes\next\source\css_variables\base.styl 发布站点安装相关插件12npm install hexo-deployer-git --save npm install hexo-server --save 更改主配置文件_config.yml deploy:type: gitrepo: git@github:/xxx.github.io.gitbranch: master 12hexo g -d hexo d -g 使用RSS1npm install hexo-generator-feed --save _config.yml rss: /atom.xml 安装搜索服务npm install hexo-generator-searchdb --save themes_config.yml添加以下内容： search:path: search.xmlfield: postformat: htmllimit: 10000 主配置文件_config.yml local_search: enable: true 使用图片方法一 安装hexo-asset-image 1npm install hexo-asset-image --save ![logo] (MacGesture2-Publish/logo.jpg) 语法 方法二主配置文件_config.yml post_asset_folder: true 引用语法1234&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125;&#123;% asset_img example.jpg This is an example image %&#125; 开启站点地图12npm install hexo-generator-sitemap --save npm install hexo-generator-baidu-sitemap --save 主配置文件_config.yml sitemap: path: /sitemap.xml baidusitemap: path: /baidusitemap.xml 添加背景图片/themes/next/source/css/_custom // Custom styles.body { background:url(/images/background.jpg); background-attachment: fixed;} 添加摘要 &lt; !–more–&gt; 标签插件123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125;]]></content>
    </entry>

    
  
  
</search>
